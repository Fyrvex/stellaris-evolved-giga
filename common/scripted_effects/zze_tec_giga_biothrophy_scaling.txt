# primary inputs
@minPops = 100 # diminishing returns start after this number of pops
@maxPops = 300 # at this number of pops the efficiency of the next one will be minimum
@minEfficiency = 0.2 # efficiency of subsequent pops after maxPops

# intermediary variables, these make the math effects simpler by pre-calculating constants
# update these if the primary inputs are changed or everything will break
@interval = 200 # maxPops - minPops
@halfInterval = 100 # interval / 2
@minPlusHalfInterval = 200 # minPops + halfInterval
@fillEfficiency = -0.3 # minEfficiency - 0.5

giga_recalculate_biotrophy_variables = {
	# clear counter
	set_variable = {
		which = giga_biotrophy_count
		value = 0
	}
	set_variable = {
		which = giga_biotrophy_unemployed_count
		value = 0
	}

	# count up all the biotrophies currently giving production bonuses
	# still hate doing this but can't export to variable with a limit
	every_owned_pop = {
		limit = {
			species = {
				has_citizenship_type = {
					country = prev.owner
					type = citizenship_organic_trophy # we need to check all bio-trophies, employed or not
				}
			}
		}

		if = { # if they're employed and happy, increment our working trophy count
			limit = {
				has_job = bio_trophy
				happiness >= 0.5 # bio-trophies only give their bonuses if they're 50%+ happy
			}

			prev = {
				change_variable = {
					which = giga_biotrophy_count
					value = 1
				}
			}
		}
		else_if = { # if they're unemployed, increment our unemployed count
			limit = {
				is_unemployed = yes
			}

			prev = {
				change_variable = { 
					which = giga_biotrophy_unemployed_count
					value = 1
				}
			}
		}
	}

	# set modifier power to zero, also used when count is at or under minPops
	set_variable = {
		which = giga_biotrophy_modifier
		value = 0
	}
	# efficiency to 1.0, since we've got no modifier power
	set_variable = {
		which = giga_biotrophy_efficiency
		value = 1
	}

	# determine modifier power
	if = {
		limit = { # if we're over the max pops, calculate the constantly increasing value
			check_variable = {
				which = giga_biotrophy_count
				value > @maxPops
			}
		}

		# efficiency to minimum, since we're over the max count
		set_variable = {
			which = giga_biotrophy_efficiency
			value = @minEfficiency
		}

		# diff = x - minPops
		set_variable = {
			which = giga_biotrophy_intermediate
			value = giga_biotrophy_count
		}
		subtract_variable = {
			which = giga_biotrophy_intermediate
			value = @minPops
		}

		# diff * minEfficiency
		multiply_variable = {
			which = giga_biotrophy_intermediate
			value = @minEfficiency
		}
		# + minPlusHalfInterval
		change_variable = {
			which = giga_biotrophy_intermediate
			value = @minPlusHalfInterval
		}

		# modifier = x - (minPlusHalfInterval + minEfficiency * diff)
		set_variable = {
			which = giga_biotrophy_modifier
			value = giga_biotrophy_count
		}
		subtract_variable = {
			which = giga_biotrophy_modifier
			value = giga_biotrophy_intermediate
		}

		############### 
		# evolved adjustment due to half bio throphy complex output
		divide_variable = {
			which = giga_biotrophy_modifier
			value = 2
		}
	}
	else_if = {
		limit = { # if we're between min and max pops, calculate the curve
			check_variable = {
				which = giga_biotrophy_count
				value > @minPops
			}
		}

		# diff = x - minPops
		set_variable = {
			which = giga_biotrophy_diff
			value = giga_biotrophy_count
		}
		subtract_variable = {
			which = giga_biotrophy_diff
			value = @minPops
		}

		# fract = diff / interval
		set_variable = {
			which = giga_biotrophy_fraction
			value = giga_biotrophy_diff
		}
		divide_variable = {
			which = giga_biotrophy_fraction
			value = @interval
		}

		# fract * fillEfficiency
		set_variable = {
			which = giga_biotrophy_intermediate
			value = giga_biotrophy_fraction
		}
		multiply_variable = {
			which = giga_biotrophy_intermediate
			value = @fillEfficiency
		}

		# +1
		change_variable = {
			which = giga_biotrophy_intermediate
			value = 1
		}

		# * diff
		multiply_variable = {
			which = giga_biotrophy_intermediate
			value = giga_biotrophy_diff
		}

		# + minPops
		change_variable = {
			which = giga_biotrophy_intermediate
			value = @minPops
		}

		# modifier = x - (minPops + diff * (fillEfficiency * fract + 1))
		set_variable = {
			which = giga_biotrophy_modifier
			value = giga_biotrophy_count
		}
		subtract_variable = {
			which = giga_biotrophy_modifier
			value = giga_biotrophy_intermediate
		}

		############### 
		# evolved adjustment due to half bio throphy complex output
		divide_variable = {
			which = giga_biotrophy_modifier
			value = 2
		}

		# now that the modifier is done, calculate the efficiency for the tooltip
		# just lerping between 1 and minEfficiency by fract, and efficiency starts set to 1
		subtract_variable = {
			which = giga_biotrophy_efficiency
			value = giga_biotrophy_fraction
		}

		multiply_variable = {
			which = giga_biotrophy_fraction # we're done with fract now so we can use it for the second part of efficiency
			value = @minEfficiency
		}

		# efficiency = (1-fract) + (minEfficiency * fract)
		change_variable = {
			which = giga_biotrophy_efficiency
			value = giga_biotrophy_fraction
		}
	}

	# Evolved
	set_variable = {
		which = giga_biotrophy_evolved_output
		value = giga_biotrophy_count
	}
	divide_variable = {
		which = giga_biotrophy_evolved_output
		value = 2
	}

	# adjusted bonus for tooltip
	set_variable = {
		which = giga_biotrophy_adjusted
		value = giga_biotrophy_evolved_output
	}
	subtract_variable = {
		which = giga_biotrophy_adjusted
		value = giga_biotrophy_modifier
	}
	round_variable_to_closest = {
		which = giga_biotrophy_adjusted
		value = 0.01
	}

	# efficiency percentage for tooltip
	multiply_variable = {
		which = giga_biotrophy_efficiency
		value = 100
	}
	round_variable_to_closest = {
		which = giga_biotrophy_efficiency
		value = 0.01
	}
}